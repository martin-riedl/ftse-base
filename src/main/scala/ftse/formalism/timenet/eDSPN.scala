// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package ftse.formalism.timenet


case class EDSPNNet(place: Seq[ftse.formalism.timenet.PlaceType] = Nil,
  exponentialTransition: Seq[ftse.formalism.timenet.ExponentialTransitionType] = Nil,
  immediateTransition: Seq[ftse.formalism.timenet.ImmediateTransitionType] = Nil,
  deterministicTransition: Seq[ftse.formalism.timenet.DeterministicTransitionType] = Nil,
  generalTransition: Seq[ftse.formalism.timenet.GeneralTransitionType] = Nil,
  arc: Seq[ftse.formalism.timenet.ArcType] = Nil,
  inhibit: Seq[ftse.formalism.timenet.InhibitType] = Nil,
  measure: Seq[ftse.formalism.timenet.MeasureType] = Nil,
  definition: Seq[ftse.formalism.timenet.DefinitionType] = Nil,
  id: String,
  netclass: String) extends NetTypable


trait TransitionTypable extends NodeTypable {
  val graphics: ftse.formalism.timenet.GraphicsType
  val label: ftse.formalism.timenet.LabelType
  val id: String
  val typeValue: ftse.formalism.timenet.Type
}


case class TransitionType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type) extends TransitionTypable


case class ExponentialTransitionType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type,
  delay: String,
  serverType: ftse.formalism.timenet.ServerTypeType,
  preemptionPolicy: ftse.formalism.timenet.PreemptionPolicyType,
  DTSPNpriority: String) extends TransitionTypable


abstract class AbstrImmediateTransitionType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type,
  priority: String,
  weight: String,
  enablingFunction: String) extends TransitionTypable

case class ImmediateTransitionType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type,
  priority: String,
  weight: String,
  enablingFunction: String) extends AbstrImmediateTransitionType(graphics, label, id, typeValue, priority, weight, enablingFunction)


case class DeterministicTransitionType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type,
  delay: String,
  preemptionPolicy: ftse.formalism.timenet.PreemptionPolicyType,
  DTSPNpriority: String) extends TransitionTypable


case class GeneralTransitionType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type,
  delay: String,
  preemptionPolicy: ftse.formalism.timenet.PreemptionPolicyType) extends TransitionTypable


case class PlaceType(graphics: ftse.formalism.timenet.GraphicsType,
  label: ftse.formalism.timenet.LabelType,
  id: String,
  typeValue: ftse.formalism.timenet.Type,
  initialMarking: String) extends NodeTypable


case class ArcType(inscription: ftse.formalism.timenet.InscriptionType,
  handle: Seq[ftse.formalism.timenet.HandleType] = Nil,
  fromNode: String,
  toNode: String,
  id: String,
  typeValue: ftse.formalism.timenet.Type) extends ConnectorTypable


case class InhibitType(inscription: ftse.formalism.timenet.InscriptionType,
  handle: Seq[ftse.formalism.timenet.HandleType] = Nil,
  fromNode: String,
  toNode: String,
  id: String,
  typeValue: ftse.formalism.timenet.Type) extends ConnectorTypable


case class InscriptionType(graphics: ftse.formalism.timenet.GraphicsType,
  typeValue: ftse.formalism.timenet.Type,
  id: String,
  text: String) extends InscriptionTextTypable


case class LabelType(graphics: ftse.formalism.timenet.GraphicsType,
  typeValue: ftse.formalism.timenet.Type,
  id: String,
  text: String) extends TextTypable


case class MeasureType(graphics: ftse.formalism.timenet.GraphicsType,
  additionalData: Option[ftse.formalism.timenet.AddDataType] = None,
  typeValue: ftse.formalism.timenet.Type,
  id: String,
  name: String,
  expression: String,
  result: String) extends TextTypable


case class DefinitionType(graphics: ftse.formalism.timenet.GraphicsType,
  additionalData: Option[ftse.formalism.timenet.AddDataType] = None,
  typeValue: ftse.formalism.timenet.Type,
  id: String,
  defType: ftse.formalism.timenet.DefTypeType,
  name: String,
  expression: String) extends TextTypable

trait ServerTypeType

object ServerTypeType {
  def fromString(value: String): ServerTypeType = value match {
    case "InfiniteServer" => InfiniteServer
    case "ExclusiveServer" => ExclusiveServer

  }
}

case object InfiniteServer extends ServerTypeType { override def toString = "InfiniteServer" }
case object ExclusiveServer extends ServerTypeType { override def toString = "ExclusiveServer" }

trait PreemptionPolicyType

object PreemptionPolicyType {
  def fromString(value: String): PreemptionPolicyType = value match {
    case "PRD" => PRD
    case "PRS" => PRS

  }
}

case object PRD extends PreemptionPolicyType { override def toString = "PRD" }
case object PRS extends PreemptionPolicyType { override def toString = "PRS" }

trait BooleanType

object BooleanType {
  def fromString(value: String): BooleanType = value match {
    case "true" => True
    case "false" => False

  }
}

case object True extends BooleanType { override def toString = "true" }
case object False extends BooleanType { override def toString = "false" }

trait DefTypeType

object DefTypeType {
  def fromString(value: String): DefTypeType = value match {
    case "int" => IntType
    case "real" => Real

  }
}

case object IntType extends DefTypeType { override def toString = "int" }
case object Real extends DefTypeType { override def toString = "real" }


case class AddDataType(classname: String)

