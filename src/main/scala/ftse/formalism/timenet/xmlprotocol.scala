// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package ftse.formalism.timenet
    
/**
usage:
val obj = scalaxb.fromXML[ftse.formalism.timenet.Foo](node)
val document = scalaxb.toXML[ftse.formalism.timenet.Foo](obj, "foo", ftse.formalism.timenet.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(Some("tns") -> "http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val TimenetTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.Type] = new DefaultTimenetTypeFormat {}
  implicit lazy val TimenetNetTypableFormat: scalaxb.XMLFormat[ftse.formalism.timenet.NetTypable] = new DefaultTimenetNetTypableFormat {}
  implicit lazy val TimenetNetTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.NetType] = new DefaultTimenetNetTypeFormat {}
  implicit lazy val TimenetNodeTypableFormat: scalaxb.XMLFormat[ftse.formalism.timenet.NodeTypable] = new DefaultTimenetNodeTypableFormat {}
  implicit lazy val TimenetNodeTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.NodeType] = new DefaultTimenetNodeTypeFormat {}
  implicit lazy val TimenetHandleTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.HandleType] = new DefaultTimenetHandleTypeFormat {}
  implicit lazy val TimenetConnectorTypableFormat: scalaxb.XMLFormat[ftse.formalism.timenet.ConnectorTypable] = new DefaultTimenetConnectorTypableFormat {}
  implicit lazy val TimenetConnectorTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.ConnectorType] = new DefaultTimenetConnectorTypeFormat {}
  implicit lazy val TimenetTextTypableFormat: scalaxb.XMLFormat[ftse.formalism.timenet.TextTypable] = new DefaultTimenetTextTypableFormat {}
  implicit lazy val TimenetTextTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.TextType] = new DefaultTimenetTextTypeFormat {}
  implicit lazy val TimenetInscriptionTextTypableFormat: scalaxb.XMLFormat[ftse.formalism.timenet.InscriptionTextTypable] = new DefaultTimenetInscriptionTextTypableFormat {}
  implicit lazy val TimenetInscriptionTextTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.InscriptionTextType] = new DefaultTimenetInscriptionTextTypeFormat {}
  implicit lazy val TimenetGraphicsTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.GraphicsType] = new DefaultTimenetGraphicsTypeFormat {}
  implicit lazy val TimenetEDSPNNetFormat: scalaxb.XMLFormat[ftse.formalism.timenet.EDSPNNet] = new DefaultTimenetEDSPNNetFormat {}
  implicit lazy val TimenetTransitionTypableFormat: scalaxb.XMLFormat[ftse.formalism.timenet.TransitionTypable] = new DefaultTimenetTransitionTypableFormat {}
  implicit lazy val TimenetTransitionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.TransitionType] = new DefaultTimenetTransitionTypeFormat {}
  implicit lazy val TimenetExponentialTransitionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.ExponentialTransitionType] = new DefaultTimenetExponentialTransitionTypeFormat {}
  implicit lazy val TimenetImmediateTransitionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.ImmediateTransitionType] = new DefaultTimenetImmediateTransitionTypeFormat {}
  implicit lazy val TimenetDeterministicTransitionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.DeterministicTransitionType] = new DefaultTimenetDeterministicTransitionTypeFormat {}
  implicit lazy val TimenetGeneralTransitionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.GeneralTransitionType] = new DefaultTimenetGeneralTransitionTypeFormat {}
  implicit lazy val TimenetPlaceTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.PlaceType] = new DefaultTimenetPlaceTypeFormat {}
  implicit lazy val TimenetArcTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.ArcType] = new DefaultTimenetArcTypeFormat {}
  implicit lazy val TimenetInhibitTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.InhibitType] = new DefaultTimenetInhibitTypeFormat {}
  implicit lazy val TimenetInscriptionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.InscriptionType] = new DefaultTimenetInscriptionTypeFormat {}
  implicit lazy val TimenetLabelTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.LabelType] = new DefaultTimenetLabelTypeFormat {}
  implicit lazy val TimenetMeasureTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.MeasureType] = new DefaultTimenetMeasureTypeFormat {}
  implicit lazy val TimenetDefinitionTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.DefinitionType] = new DefaultTimenetDefinitionTypeFormat {}
  implicit lazy val TimenetServerTypeTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.ServerTypeType] = new DefaultTimenetServerTypeTypeFormat {}
  implicit lazy val TimenetPreemptionPolicyTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.PreemptionPolicyType] = new DefaultTimenetPreemptionPolicyTypeFormat {}
  implicit lazy val TimenetBooleanTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.BooleanType] = new DefaultTimenetBooleanTypeFormat {}
  implicit lazy val TimenetDefTypeTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.DefTypeType] = new DefaultTimenetDefTypeTypeFormat {}
  implicit lazy val TimenetAddDataTypeFormat: scalaxb.XMLFormat[ftse.formalism.timenet.AddDataType] = new DefaultTimenetAddDataTypeFormat {}

  def buildTimenetTypeFormat = new DefaultTimenetTypeFormat {}
  trait DefaultTimenetTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.Type] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.Type] =
      Right(ftse.formalism.timenet.Type.fromString(seq.text))
    
    def writes(__obj: ftse.formalism.timenet.Type, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultTimenetNetTypableFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.NetTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.NetTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("eDSPNNet")) => Right(scalaxb.fromXML[ftse.formalism.timenet.EDSPNNet](node, stack))
          case _ => Right(scalaxb.fromXML[ftse.formalism.timenet.NetType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: ftse.formalism.timenet.NetTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ftse.formalism.timenet.EDSPNNet => scalaxb.toXML[ftse.formalism.timenet.EDSPNNet](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.NetType => scalaxb.toXML[ftse.formalism.timenet.NetType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTimenetNetTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.NetType] with scalaxb.CanWriteChildNodes[ftse.formalism.timenet.NetType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.NetType] = seq match {
      case node: scala.xml.Node => Right(ftse.formalism.timenet.NetType(scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@netclass"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ftse.formalism.timenet.NetType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "netclass", __obj.netclass.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.NetType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultTimenetNodeTypableFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.NodeTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.NodeTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("TransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.TransitionTypable](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("ExponentialTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.ExponentialTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("ImmediateTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.ImmediateTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("DeterministicTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.DeterministicTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("GeneralTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.GeneralTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("PlaceType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.PlaceType](node, stack))
          case _ => Right(scalaxb.fromXML[ftse.formalism.timenet.NodeType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: ftse.formalism.timenet.NodeTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ftse.formalism.timenet.TransitionTypable => scalaxb.toXML[ftse.formalism.timenet.TransitionTypable](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.PlaceType => scalaxb.toXML[ftse.formalism.timenet.PlaceType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.NodeType => scalaxb.toXML[ftse.formalism.timenet.NodeType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTimenetNodeTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.NodeType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("NodeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.NodeType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ^^
      { case p1 =>
      ftse.formalism.timenet.NodeType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.NodeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.NodeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false))

  }

  trait DefaultTimenetHandleTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.HandleType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("HandleType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.HandleType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ^^
      { case p1 =>
      ftse.formalism.timenet.HandleType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.HandleType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.HandleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false))

  }

  trait DefaultTimenetConnectorTypableFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.ConnectorTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.ConnectorTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("ArcType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.ArcType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("InhibitType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.InhibitType](node, stack))
          case _ => Right(scalaxb.fromXML[ftse.formalism.timenet.ConnectorType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: ftse.formalism.timenet.ConnectorTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ftse.formalism.timenet.ArcType => scalaxb.toXML[ftse.formalism.timenet.ArcType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.InhibitType => scalaxb.toXML[ftse.formalism.timenet.InhibitType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.ConnectorType => scalaxb.toXML[ftse.formalism.timenet.ConnectorType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTimenetConnectorTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.ConnectorType] with scalaxb.CanWriteChildNodes[ftse.formalism.timenet.ConnectorType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.ConnectorType] = seq match {
      case node: scala.xml.Node => Right(ftse.formalism.timenet.ConnectorType(scalaxb.fromXML[String]((node \ "@fromNode"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@toNode"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("connector"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ftse.formalism.timenet.ConnectorType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "fromNode", __obj.fromNode.toString, attr)
      attr = scala.xml.Attribute(null, "toNode", __obj.toNode.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.ConnectorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultTimenetTextTypableFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.TextTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.TextTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("LabelType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.LabelType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("MeasureType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.MeasureType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("DefinitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.DefinitionType](node, stack))
          case _ => Right(scalaxb.fromXML[ftse.formalism.timenet.TextType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: ftse.formalism.timenet.TextTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ftse.formalism.timenet.LabelType => scalaxb.toXML[ftse.formalism.timenet.LabelType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.MeasureType => scalaxb.toXML[ftse.formalism.timenet.MeasureType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.DefinitionType => scalaxb.toXML[ftse.formalism.timenet.DefinitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.TextType => scalaxb.toXML[ftse.formalism.timenet.TextType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTimenetTextTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.TextType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("TextType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.TextType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ^^
      { case p1 =>
      ftse.formalism.timenet.TextType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("text"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.TextType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.TextType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false))

  }

  trait DefaultTimenetInscriptionTextTypableFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.InscriptionTextTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.InscriptionTextTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("InscriptionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.InscriptionType](node, stack))
          case _ => Right(scalaxb.fromXML[ftse.formalism.timenet.InscriptionTextType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: ftse.formalism.timenet.InscriptionTextTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ftse.formalism.timenet.InscriptionType => scalaxb.toXML[ftse.formalism.timenet.InscriptionType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.InscriptionTextType => scalaxb.toXML[ftse.formalism.timenet.InscriptionTextType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTimenetInscriptionTextTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.InscriptionTextType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("InscriptionTextType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.InscriptionTextType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ^^
      { case p1 =>
      ftse.formalism.timenet.InscriptionTextType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("inscriptionText"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.InscriptionTextType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.InscriptionTextType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false))

  }

  trait DefaultTimenetGraphicsTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.GraphicsType] with scalaxb.CanWriteChildNodes[ftse.formalism.timenet.GraphicsType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.GraphicsType] = seq match {
      case node: scala.xml.Node => Right(ftse.formalism.timenet.GraphicsType(scalaxb.fromXML[BigInt]((node \ "@x"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt]((node \ "@y"), scalaxb.ElemName(node) :: stack),
        (node \ "@orientation").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[BigInt](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ftse.formalism.timenet.GraphicsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "x", __obj.x.toString, attr)
      attr = scala.xml.Attribute(null, "y", __obj.y.toString, attr)
      if (__obj.orientation.toString != "0") attr = scala.xml.Attribute(null, "orientation", __obj.orientation.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.GraphicsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultTimenetEDSPNNetFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.EDSPNNet] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("eDSPNNet")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.EDSPNNet] =
      phrase(rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "place")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "exponentialTransition")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "immediateTransition")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "deterministicTransition")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "generalTransition")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "arc")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "inhibit")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "measure")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "definition")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      ftse.formalism.timenet.EDSPNNet(p1.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.PlaceType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.ExponentialTransitionType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.ImmediateTransitionType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.DeterministicTransitionType](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.GeneralTransitionType](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.ArcType](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.InhibitType](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.MeasureType](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.DefinitionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@netclass"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.EDSPNNet, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "netclass", __obj.netclass.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.EDSPNNet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.place flatMap { scalaxb.toXML[ftse.formalism.timenet.PlaceType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("place"), __scope, false) },
        __obj.exponentialTransition flatMap { scalaxb.toXML[ftse.formalism.timenet.ExponentialTransitionType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("exponentialTransition"), __scope, false) },
        __obj.immediateTransition flatMap { scalaxb.toXML[ftse.formalism.timenet.ImmediateTransitionType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("immediateTransition"), __scope, false) },
        __obj.deterministicTransition flatMap { scalaxb.toXML[ftse.formalism.timenet.DeterministicTransitionType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("deterministicTransition"), __scope, false) },
        __obj.generalTransition flatMap { scalaxb.toXML[ftse.formalism.timenet.GeneralTransitionType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("generalTransition"), __scope, false) },
        __obj.arc flatMap { scalaxb.toXML[ftse.formalism.timenet.ArcType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("arc"), __scope, false) },
        __obj.inhibit flatMap { scalaxb.toXML[ftse.formalism.timenet.InhibitType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("inhibit"), __scope, false) },
        __obj.measure flatMap { scalaxb.toXML[ftse.formalism.timenet.MeasureType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("measure"), __scope, false) },
        __obj.definition flatMap { scalaxb.toXML[ftse.formalism.timenet.DefinitionType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("definition"), __scope, false) })

  }

  trait DefaultTimenetTransitionTypableFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.TransitionTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.TransitionTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("ExponentialTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.ExponentialTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("ImmediateTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.ImmediateTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("DeterministicTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.DeterministicTransitionType](node, stack))
          case (Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("GeneralTransitionType")) => Right(scalaxb.fromXML[ftse.formalism.timenet.GeneralTransitionType](node, stack))
          case _ => Right(scalaxb.fromXML[ftse.formalism.timenet.TransitionType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: ftse.formalism.timenet.TransitionTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: ftse.formalism.timenet.ExponentialTransitionType => scalaxb.toXML[ftse.formalism.timenet.ExponentialTransitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.ImmediateTransitionType => scalaxb.toXML[ftse.formalism.timenet.ImmediateTransitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.DeterministicTransitionType => scalaxb.toXML[ftse.formalism.timenet.DeterministicTransitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.GeneralTransitionType => scalaxb.toXML[ftse.formalism.timenet.GeneralTransitionType](x, __namespace, __elementLabel, __scope, true)
      case x: ftse.formalism.timenet.TransitionType => scalaxb.toXML[ftse.formalism.timenet.TransitionType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultTimenetTransitionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.TransitionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("TransitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.TransitionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      (scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "label")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.TransitionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.LabelType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.TransitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.TransitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        scalaxb.toXML[ftse.formalism.timenet.LabelType](__obj.label, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("label"), __scope, false))

  }

  trait DefaultTimenetExponentialTransitionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.ExponentialTransitionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("ExponentialTransitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.ExponentialTransitionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      (scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "label")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.ExponentialTransitionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.LabelType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack),
        (node \ "@delay").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1.0"), scalaxb.ElemName(node) :: stack) },
        (node \ "@serverType").headOption map { scalaxb.fromXML[ftse.formalism.timenet.ServerTypeType](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[ftse.formalism.timenet.ServerTypeType](scala.xml.Text("ExclusiveServer"), scalaxb.ElemName(node) :: stack) },
        (node \ "@preemptionPolicy").headOption map { scalaxb.fromXML[ftse.formalism.timenet.PreemptionPolicyType](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[ftse.formalism.timenet.PreemptionPolicyType](scala.xml.Text("PRD"), scalaxb.ElemName(node) :: stack) },
        (node \ "@DTSPNpriority").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.ExponentialTransitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      if (__obj.delay.toString != "1.0") attr = scala.xml.Attribute(null, "delay", __obj.delay.toString, attr)
      if (__obj.serverType.toString != "ExclusiveServer") attr = scala.xml.Attribute(null, "serverType", __obj.serverType.toString, attr)
      if (__obj.preemptionPolicy.toString != "PRD") attr = scala.xml.Attribute(null, "preemptionPolicy", __obj.preemptionPolicy.toString, attr)
      if (__obj.DTSPNpriority.toString != "1") attr = scala.xml.Attribute(null, "DTSPNpriority", __obj.DTSPNpriority.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.ExponentialTransitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        scalaxb.toXML[ftse.formalism.timenet.LabelType](__obj.label, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("label"), __scope, false))

  }

  trait DefaultTimenetImmediateTransitionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.ImmediateTransitionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("ImmediateTransitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.ImmediateTransitionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      (scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "label")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.ImmediateTransitionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.LabelType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack),
        (node \ "@priority").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack) },
        (node \ "@weight").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack) },
        (node \ "@enablingFunction").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text(""), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.ImmediateTransitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      if (__obj.priority.toString != "1") attr = scala.xml.Attribute(null, "priority", __obj.priority.toString, attr)
      if (__obj.weight.toString != "1") attr = scala.xml.Attribute(null, "weight", __obj.weight.toString, attr)
      if (__obj.enablingFunction.toString != "") attr = scala.xml.Attribute(null, "enablingFunction", __obj.enablingFunction.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.ImmediateTransitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        scalaxb.toXML[ftse.formalism.timenet.LabelType](__obj.label, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("label"), __scope, false))

  }

  trait DefaultTimenetDeterministicTransitionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.DeterministicTransitionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("DeterministicTransitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.DeterministicTransitionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      (scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "label")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.DeterministicTransitionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.LabelType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack),
        (node \ "@delay").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1.0"), scalaxb.ElemName(node) :: stack) },
        (node \ "@preemptionPolicy").headOption map { scalaxb.fromXML[ftse.formalism.timenet.PreemptionPolicyType](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[ftse.formalism.timenet.PreemptionPolicyType](scala.xml.Text("PRD"), scalaxb.ElemName(node) :: stack) },
        (node \ "@DTSPNpriority").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.DeterministicTransitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      if (__obj.delay.toString != "1.0") attr = scala.xml.Attribute(null, "delay", __obj.delay.toString, attr)
      if (__obj.preemptionPolicy.toString != "PRD") attr = scala.xml.Attribute(null, "preemptionPolicy", __obj.preemptionPolicy.toString, attr)
      if (__obj.DTSPNpriority.toString != "1") attr = scala.xml.Attribute(null, "DTSPNpriority", __obj.DTSPNpriority.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.DeterministicTransitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        scalaxb.toXML[ftse.formalism.timenet.LabelType](__obj.label, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("label"), __scope, false))

  }

  trait DefaultTimenetGeneralTransitionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.GeneralTransitionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("GeneralTransitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.GeneralTransitionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      (scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "label")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.GeneralTransitionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.LabelType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack),
        (node \ "@delay").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1.0"), scalaxb.ElemName(node) :: stack) },
        (node \ "@preemptionPolicy").headOption map { scalaxb.fromXML[ftse.formalism.timenet.PreemptionPolicyType](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[ftse.formalism.timenet.PreemptionPolicyType](scala.xml.Text("PRD"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.GeneralTransitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      if (__obj.delay.toString != "1.0") attr = scala.xml.Attribute(null, "delay", __obj.delay.toString, attr)
      if (__obj.preemptionPolicy.toString != "PRD") attr = scala.xml.Attribute(null, "preemptionPolicy", __obj.preemptionPolicy.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.GeneralTransitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        scalaxb.toXML[ftse.formalism.timenet.LabelType](__obj.label, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("label"), __scope, false))

  }

  trait DefaultTimenetPlaceTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.PlaceType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("PlaceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.PlaceType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      (scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "label")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.PlaceType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.LabelType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("node"), scalaxb.ElemName(node) :: stack),
        (node \ "@initialMarking").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.PlaceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      if (__obj.initialMarking.toString != "0") attr = scala.xml.Attribute(null, "initialMarking", __obj.initialMarking.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.PlaceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        scalaxb.toXML[ftse.formalism.timenet.LabelType](__obj.label, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("label"), __scope, false))

  }

  trait DefaultTimenetArcTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.ArcType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("ArcType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.ArcType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "inscription")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "handle")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.ArcType(scalaxb.fromXML[ftse.formalism.timenet.InscriptionType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.HandleType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@fromNode"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@toNode"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("connector"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.ArcType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "fromNode", __obj.fromNode.toString, attr)
      attr = scala.xml.Attribute(null, "toNode", __obj.toNode.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.ArcType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.InscriptionType](__obj.inscription, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("inscription"), __scope, false),
        __obj.handle flatMap { scalaxb.toXML[ftse.formalism.timenet.HandleType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("handle"), __scope, false) })

  }

  trait DefaultTimenetInhibitTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.InhibitType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("InhibitType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.InhibitType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "inscription")) ~ 
      rep(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "handle")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.InhibitType(scalaxb.fromXML[ftse.formalism.timenet.InscriptionType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[ftse.formalism.timenet.HandleType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@fromNode"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@toNode"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("connector"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.InhibitType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "fromNode", __obj.fromNode.toString, attr)
      attr = scala.xml.Attribute(null, "toNode", __obj.toNode.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.InhibitType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.InscriptionType](__obj.inscription, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("inscription"), __scope, false),
        __obj.handle flatMap { scalaxb.toXML[ftse.formalism.timenet.HandleType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("handle"), __scope, false) })

  }

  trait DefaultTimenetInscriptionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.InscriptionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("InscriptionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.InscriptionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ^^
      { case p1 =>
      ftse.formalism.timenet.InscriptionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("inscriptionText"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        (node \ "@text").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text("1"), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.InscriptionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      if (__obj.text.toString != "1") attr = scala.xml.Attribute(null, "text", __obj.text.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.InscriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false))

  }

  trait DefaultTimenetLabelTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.LabelType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("LabelType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.LabelType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ^^
      { case p1 =>
      ftse.formalism.timenet.LabelType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("text"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        (node \ "@text").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text(""), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.LabelType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      if (__obj.text.toString != "") attr = scala.xml.Attribute(null, "text", __obj.text.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.LabelType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false))

  }

  trait DefaultTimenetMeasureTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.MeasureType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("MeasureType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.MeasureType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      opt(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "additionalData")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.MeasureType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[ftse.formalism.timenet.AddDataType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("text"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@expression"), scalaxb.ElemName(node) :: stack),
        (node \ "@result").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[String](scala.xml.Text(""), scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.MeasureType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "expression", __obj.expression.toString, attr)
      if (__obj.result.toString != "") attr = scala.xml.Attribute(null, "result", __obj.result.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.MeasureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        __obj.additionalData map { scalaxb.toXML[ftse.formalism.timenet.AddDataType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("additionalData"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultTimenetDefinitionTypeFormat extends scalaxb.ElemNameParser[ftse.formalism.timenet.DefinitionType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    override def typeName: Option[String] = Some("DefinitionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ftse.formalism.timenet.DefinitionType] =
      phrase((scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "graphics")) ~ 
      opt(scalaxb.ElemName(Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), "additionalData")) ^^
      { case p1 ~ p2 =>
      ftse.formalism.timenet.DefinitionType(scalaxb.fromXML[ftse.formalism.timenet.GraphicsType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[ftse.formalism.timenet.AddDataType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[ftse.formalism.timenet.Type](scala.xml.Text("text"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@id"), scalaxb.ElemName(node) :: stack),
        (node \ "@defType").headOption map { scalaxb.fromXML[ftse.formalism.timenet.DefTypeType](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[ftse.formalism.timenet.DefTypeType](scala.xml.Text("int"), scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@expression"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: ftse.formalism.timenet.DefinitionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      if (__obj.defType.toString != "int") attr = scala.xml.Attribute(null, "defType", __obj.defType.toString, attr)
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "expression", __obj.expression.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.DefinitionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[ftse.formalism.timenet.GraphicsType](__obj.graphics, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("graphics"), __scope, false),
        __obj.additionalData map { scalaxb.toXML[ftse.formalism.timenet.AddDataType](_, Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN"), Some("additionalData"), __scope, false) } getOrElse {Nil})

  }

  def buildTimenetServerTypeTypeFormat = new DefaultTimenetServerTypeTypeFormat {}
  trait DefaultTimenetServerTypeTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.ServerTypeType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.ServerTypeType] =
      Right(ftse.formalism.timenet.ServerTypeType.fromString(seq.text))
    
    def writes(__obj: ftse.formalism.timenet.ServerTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildTimenetPreemptionPolicyTypeFormat = new DefaultTimenetPreemptionPolicyTypeFormat {}
  trait DefaultTimenetPreemptionPolicyTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.PreemptionPolicyType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.PreemptionPolicyType] =
      Right(ftse.formalism.timenet.PreemptionPolicyType.fromString(seq.text))
    
    def writes(__obj: ftse.formalism.timenet.PreemptionPolicyType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildTimenetBooleanTypeFormat = new DefaultTimenetBooleanTypeFormat {}
  trait DefaultTimenetBooleanTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.BooleanType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.BooleanType] =
      Right(ftse.formalism.timenet.BooleanType.fromString(seq.text))
    
    def writes(__obj: ftse.formalism.timenet.BooleanType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildTimenetDefTypeTypeFormat = new DefaultTimenetDefTypeTypeFormat {}
  trait DefaultTimenetDefTypeTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.DefTypeType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.DefTypeType] =
      Right(ftse.formalism.timenet.DefTypeType.fromString(seq.text))
    
    def writes(__obj: ftse.formalism.timenet.DefTypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultTimenetAddDataTypeFormat extends scalaxb.XMLFormat[ftse.formalism.timenet.AddDataType] with scalaxb.CanWriteChildNodes[ftse.formalism.timenet.AddDataType] {
    val targetNamespace: Option[String] = Some("http://pdv.cs.tu-berlin.de/TimeNET/schema/eDSPN")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ftse.formalism.timenet.AddDataType] = seq match {
      case node: scala.xml.Node => Right(ftse.formalism.timenet.AddDataType(scalaxb.fromXML[String]((node \ "@classname"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: ftse.formalism.timenet.AddDataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "classname", __obj.classname.toString, attr)
      attr
    }

    def writesChildNodes(__obj: ftse.formalism.timenet.AddDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

